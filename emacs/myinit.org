#+STARTIP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer) 

  ;; default text-scale
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* which key
Brings up some help
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Org mode 
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  (setq package-pinned-packages
	'((org . "org")))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; reveal.js
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
     :ensure t)
#+END_SRC

* IDO mode and Ibuffer
#+BEGIN_SRC emacs-lisp
;; ido mode
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; ibuffer
(defalias 'list-buffers 'ibuffer)
#+END_SRC
* Ace Window
#+BEGIN_SRC emacs-lisp
;; ace window
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherith ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
* Swiper / Counsel / Ivy
#+BEGIN_SRC emacs-lisp
  ;; swiper
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    )
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  ;; avy
  (use-package avy
    :ensure t
    :bind ("C-:" . avy-goto-char))

#+END_SRC
* Flycheck / Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  ;; autocomplete
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)
  ;;     ))

  ;; company
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
* Other
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    ; (setq beacon-color "#66666600")
    )

  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package iedit
    :ensure t)
#+END_SRC

* Dumb Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
	   ("M-g j" . dumb-jump-go)
	   ("M-g x" . dumb-jump-go-prefer-external)
	   ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (use-package smartparens-config)
    (use-package smartparens-html)
    (use-package smartparens-python)
    (use-package smartparens-latex)
    (use-package smartparens-elixir)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    :bind
    ( ("C-<down>" . sp-down-sexp)
      ("C-<up>"   . sp-up-sexp)
      ("M-<down>" . sp-backward-down-sexp)
      ("M-<up>"   . sp-backward-up-sexp)
      ("C-M-a" . sp-beginning-of-sexp)
      ("C-M-e" . sp-end-of-sexp)



      ("C-M-f" . sp-forward-sexp)
      ("C-M-b" . sp-backward-sexp)

      ("C-M-n" . sp-next-sexp)
      ("C-M-p" . sp-previous-sexp)

      ("C-S-f" . sp-forward-symbol)
      ("C-S-b" . sp-backward-symbol)

      ("C-<right>" . sp-forward-slurp-sexp)
      ("M-<right>" . sp-forward-barf-sexp)
      ("C-<left>"  . sp-backward-slurp-sexp)
      ("M-<left>"  . sp-backward-barf-sexp)

      ("C-M-t" . sp-transpose-sexp)
      ("C-M-k" . sp-kill-sexp)
      ("C-k"   . sp-kill-hybrid-sexp)
      ("M-k"   . sp-backward-kill-sexp)
      ("C-M-w" . sp-copy-sexp)

      ("C-M-d" . delete-sexp)

      ("M-<backspace>" . backward-kill-word)
      ("C-<backspace>" . sp-backward-kill-word)
      ([remap sp-backward-kill-word] . backward-kill-word)

      ("M-[" . sp-backward-unwrap-sexp)
      ("M-]" . sp-unwrap-sexp)

      ("C-x C-t" . sp-transpose-hybrid-sexp)

      ("C-c ("  . wrap-with-parens)
      ("C-c ["  . wrap-with-brackets)
      ("C-c {"  . wrap-with-braces)
      ("C-c '"  . wrap-with-single-quotes)
      ("C-c \"" . wrap-with-double-quotes)
      ("C-c _"  . wrap-with-underscores)
      ("C-c `"  . wrap-with-back-quotes)
      ))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable)
    (setq elpy-rpc-python-command "python3")
    (setq python-shell-interpreter "python3"))

  (use-package importmagic
    :ensure t
    :config
    (add-hook 'python-mode-hook 'importmagic-mode))
#+END_SRC

* C / C++
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :config 
    (add-hook 'c-mode-common-hook
	      (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (ggtags-mode 1))))
    )

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cbd-autosetup-compile-options))
#+END_SRC
* Elixir / Alchemist
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t
    :config 
    (add-hook 'elixir-mode-hook 'smart-tabs-mode))

  (use-package alchemist
    :ensure t
    :config
    (add-hook 'elixir-mode-hook 'alchemist-mode)
    (add-hook 'elixir-mode-hook 'alchemist-phoenix-mode)
    (add-hook 'elixir-mode-hook 'company-mode)
    )

  (use-package flycheck-mix
    :ensure t
    :config
    (flycheck-mix-setup))

  (use-package flycheck-credo
    :ensure t
    :config
    (eval-after-load 'flycheck
      '(flycheck-credo-setup)))
#+END_SRC
* Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
* Smart-Tabs-Mode
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :ensure t)
#+END_SRC
